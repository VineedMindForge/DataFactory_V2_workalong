{
	"name": "UpdateProduct",
	"properties": {
		"folder": {
			"name": "Chapter 7"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ASQL_Parametrized",
						"type": "DatasetReference"
					},
					"name": "dboSales"
				},
				{
					"dataset": {
						"referenceName": "ASQL_Parametrized",
						"type": "DatasetReference"
					},
					"name": "dboProduct"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "ASQL_Parametrized",
						"type": "DatasetReference"
					},
					"name": "dboProductSink"
				}
			],
			"transformations": [
				{
					"name": "AddWeightColumns"
				},
				{
					"name": "RemoveDuplicatesForProductsTables"
				},
				{
					"name": "NewRowsOnly"
				}
			],
			"scriptLines": [
				"source(output(",
				"          RowId as integer,",
				"          Retailer as string,",
				"          SalesMonth as date,",
				"          Product as string,",
				"          SalesValueUSD as decimal(19,2),",
				"          UnitsSold as integer,",
				"          RunSeqNo as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> dboSales",
				"source(output(",
				"          Product as string,",
				"          ProductName as string,",
				"          WeightInOunces as decimal(19,2),",
				"          WeightInGrams as decimal(19,2)",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> dboProduct",
				"dboSales derive(ProductName = trim(left(Product,length(Product) - length(:WeightString))),",
				"          WeightInOunces = toFloat(replace(:WeightString, :WeightUnit, '')) / iif(:WeightUnit=='g', 28.3495, 1.0),",
				"          WeightInGrams = toFloat(replace(:WeightString, :WeightUnit, '')) * iif(:WeightUnit!='g', 28.3495,1.0)\r",
				",",
				"          WeightString := right(Product, locate(' ', reverse(Product))-1),",
				"          WeightUnit := iif(endsWith(Product,'oz'), 'oz', 'g')) ~> AddWeightColumns",
				"AddWeightColumns aggregate(groupBy(ProductName),",
				"     Product = first(ProductName),",
				"          each(match(startsWith(name,'Weight')), $$ = first($$))) ~> RemoveDuplicatesForProductsTables",
				"RemoveDuplicatesForProductsTables, dboProduct exists(RemoveDuplicatesForProductsTables@ProductName == dboProduct@Product,",
				"     negate:true,",
				"     broadcast: 'auto')~> NewRowsOnly",
				"NewRowsOnly sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          Product = ProductName,",
				"          ProductName = Product,",
				"          WeightInOunces,",
				"          WeightInGrams",
				"     )) ~> dboProductSink"
			]
		}
	}
}